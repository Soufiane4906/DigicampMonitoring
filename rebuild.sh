#!/bin/bash

###############################################################################
# Script de Red√©marrage Rapide - DigicampMonitoring
# Ce script rebuild et red√©marre les services Docker
###############################################################################

echo "üöÄ D√©marrage du rebuild DigicampMonitoring..."
echo ""

# Couleurs pour les messages
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
RED='\033[0;31m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Fonction pour afficher les logs avec couleur
info() {
    echo -e "${BLUE}‚ÑπÔ∏è  $1${NC}"
}

success() {
    echo -e "${GREEN}‚úÖ $1${NC}"
}

warning() {
    echo -e "${YELLOW}‚ö†Ô∏è  $1${NC}"
}

error() {
    echo -e "${RED}‚ùå $1${NC}"
}

# V√©rifier si Docker est en cours d'ex√©cution
if ! docker info > /dev/null 2>&1; then
    error "Docker n'est pas en cours d'ex√©cution. Veuillez d√©marrer Docker Desktop."
    exit 1
fi

success "Docker est en cours d'ex√©cution"
echo ""

# R√©cup√©rer les derni√®res modifications
info "R√©cup√©ration des derni√®res modifications depuis GitHub..."
git pull origin main

if [ $? -eq 0 ]; then
    success "Code mis √† jour"
else
    warning "Impossible de r√©cup√©rer les modifications (peut-√™tre d√©j√† √† jour)"
fi
echo ""

# Arr√™ter les conteneurs
info "Arr√™t des conteneurs en cours..."
docker-compose down

if [ $? -eq 0 ]; then
    success "Conteneurs arr√™t√©s"
else
    error "Erreur lors de l'arr√™t des conteneurs"
    exit 1
fi
echo ""

# Option : Nettoyer les volumes (demander confirmation)
read -p "$(echo -e ${YELLOW}Voulez-vous supprimer les volumes \(base de donn√©es r√©initialis√©e\) ? \[y/N\]:${NC} )" -n 1 -r
echo
if [[ $REPLY =~ ^[Yy]$ ]]; then
    info "Suppression des volumes..."
    docker-compose down -v
    success "Volumes supprim√©s"
    echo ""
fi

# Rebuild les images
info "Reconstruction des images Docker (cela peut prendre quelques minutes)..."
docker-compose build --no-cache

if [ $? -eq 0 ]; then
    success "Images reconstruites"
else
    error "Erreur lors de la reconstruction des images"
    exit 1
fi
echo ""

# D√©marrer les services
info "D√©marrage des services..."
docker-compose up -d

if [ $? -eq 0 ]; then
    success "Services d√©marr√©s"
else
    error "Erreur lors du d√©marrage des services"
    exit 1
fi
echo ""

# Attendre que les services soient pr√™ts
info "Attente du d√©marrage des services (30 secondes)..."
sleep 30

# V√©rifier l'√©tat des conteneurs
echo ""
info "√âtat des conteneurs :"
docker-compose ps
echo ""

# V√©rifier la sant√© du backend
info "V√©rification de la sant√© du backend..."
backend_health=$(curl -s -o /dev/null -w "%{http_code}" http://localhost:8080/actuator/health 2>/dev/null)

if [ "$backend_health" == "200" ]; then
    success "Backend op√©rationnel (HTTP 200)"
else
    warning "Backend non accessible (HTTP $backend_health). V√©rifiez les logs."
fi

# V√©rifier la sant√© du frontend
info "V√©rification de la sant√© du frontend..."
frontend_health=$(curl -s -o /dev/null -w "%{http_code}" http://localhost:4200 2>/dev/null)

if [ "$frontend_health" == "200" ]; then
    success "Frontend op√©rationnel (HTTP 200)"
else
    warning "Frontend non accessible (HTTP $frontend_health). V√©rifiez les logs."
fi
echo ""

# Afficher les URLs
success "üéâ Application d√©marr√©e avec succ√®s !"
echo ""
info "üì± URLs d'acc√®s :"
echo -e "   ${GREEN}Frontend:${NC} http://localhost:4200"
echo -e "   ${GREEN}Backend API:${NC} http://localhost:8080/api"
echo -e "   ${GREEN}Backend Health:${NC} http://localhost:8080/actuator/health"
echo -e "   ${GREEN}Swagger UI:${NC} http://localhost:8080/swagger-ui.html"
echo ""

# Proposer d'afficher les logs
read -p "$(echo -e ${YELLOW}Voulez-vous afficher les logs en temps r√©el ? \[y/N\]:${NC} )" -n 1 -r
echo
if [[ $REPLY =~ ^[Yy]$ ]]; then
    info "Affichage des logs (Ctrl+C pour quitter)..."
    echo ""
    docker-compose logs -f
fi
